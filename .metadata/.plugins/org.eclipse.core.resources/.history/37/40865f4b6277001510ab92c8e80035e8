
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;
import java.util.HashMap;



public class DomParser {

  public static void main(String args[]) {

    try {

	File PostFile = new File("/Users/narasimharaomuvva/Downloads/posts.xml");
	File UserFile = new File("/Users/narasimharaomuvva/Downloads/posts.xml");
	
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(PostFile);
	Document doc1 = dBuilder.parse(UserFile);
	doc.getDocumentElement().normalize();
	doc1.getDocumentElement().normalize();
    
	NodeList nList = doc.getElementsByTagName("row");
			
	
	HashMap <String ,Integer> questions=new HashMap<String ,Integer>();
    HashMap <String ,Integer> answers=new HashMap<String ,Integer>();
    String PostTypeId ;
    String OwnerUserId = null;
	


	for (int temp = 0; temp < nList.getLength(); temp++) {

		Node nNode = nList.item(temp);
				
       if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element element = (Element) nNode;
			
            OwnerUserId=element.getAttribute("OwnerUserId");
            PostTypeId=element.getAttribute("PostTypeId");
            
			
			if(PostTypeId=="1")
		    {
				
		    	if(questions.containsKey(OwnerUserId))
		    	{
		    		int val=questions.get(OwnerUserId)+1;
		    		questions.put(OwnerUserId, val);
		    	}
		    	else
		    		questions.put(OwnerUserId, 1);
		    }else
		    	if(answers.containsKey(OwnerUserId))
		    	{
		    		int val=answers.get(OwnerUserId)+1;
		    		questions.put(OwnerUserId, val);
		    	}
		    	else
		    		answers.put(OwnerUserId, 1);
		}
       
	}
	
	System.out.println(questions.size()+" "+answers.size());
    } catch (Exception e) {
    	e.printStackTrace();
    }
    
  }
  

}